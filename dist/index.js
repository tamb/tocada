var C=function(b,w){if(b<w)return w-b;else return b-w};class F{element;startX=0;startY=0;startTime=0;startPressure=0;endPressure=0;startingElement=null;touchedElements=[];thresholds;eventPrefix="";gestureStartDistance=0;latestGestureDistance=0;isMultiTouch=!1;activeTouches=0;touchCount=0;constructor(b,w={}){if(this.element=typeof b==="string"?document.querySelector(b):b,!this.element){console.error("Element not found");return}const{thresholds:H={},eventPrefix:L=""}=w;this.thresholds={swipeThreshold:H.swipeThreshold||50},this.eventPrefix=L,this.element.addEventListener("touchstart",this.handleTouchStart,!1),this.element.addEventListener("touchmove",this.handleTouchMove,!1),this.element.addEventListener("touchend",this.handleTouchEnd,!1)}destroy(){this.element?.removeEventListener("touchstart",this.handleTouchStart),this.element?.removeEventListener("touchmove",this.handleTouchMove),this.element?.removeEventListener("touchend",this.handleTouchEnd)}handleTouchStart=(b)=>{if(this.activeTouches+=b.changedTouches.length,this.touchCount=b.touches.length,this.activeTouches>1)this.isMultiTouch=!0,this.gestureStartDistance=this.getDistanceBetweenTouchPoints(b.touches),this.handleGestureStart(b);else this.isMultiTouch=!1,this.handleSwipeStart(b)};handleTouchMove=(b)=>{b.preventDefault();const w=b.touches[0].clientX,H=b.touches[0].clientY,L=document.elementFromPoint(w,H);if(L)this.touchedElements.push(L);if(this.isMultiTouch)this.handleGestureMove(b)};handleTouchEnd=(b)=>{if(this.activeTouches>=2)this.handleGestureEnd(b),this.touchCount=0;else if(this.activeTouches===1)this.handleSwipeEnd(b),this.touchCount=0;this.activeTouches-=b.changedTouches.length};handleSwipeStart=(b)=>{const w=b.touches[0];this.startX=w.clientX,this.startY=w.clientY,this.startTime=Date.now(),this.startPressure=w.force||0,this.startingElement=document.elementsFromPoint(this.startX,this.startY)[0],this.touchedElements.push(this.startingElement)};handleSwipeEnd=(b)=>{if(!this.isMultiTouch&&this.touchCount===1){const w=b.changedTouches[0],H=Date.now(),L=H-this.startTime,P=C(this.startX,w.clientX),j=C(this.startY,w.clientY),k=Math.abs(P),z=Math.abs(j),A=Math.hypot(k,z),G=P/L,I=j/L,J=A/L;this.endPressure=w.force||0;const K=(this.startPressure+this.endPressure)/2,M=document.elementFromPoint(w.clientX,w.clientY),B={velocityX:G,velocityY:I,velocity:J,avgPressure:K,startPressure:this.startPressure,endPressure:this.endPressure,startTime:this.startTime,endTime:H,distanceX:k,distanceY:z,distance:A,startingElement:this.startingElement,endingElement:M,touchedElements:this.touchedElements};this.dispatchSwipeEvent("swipe",B);const Q=this.startX<w.clientX?"swiperight":"swipeleft",R=this.startY<w.clientY?"swipedown":"swipeup",U=P>j?Q:R;this.dispatchSwipeEvent(U,B),this.touchedElements=[]}};handleGestureStart=(b)=>{this.isMultiTouch=!0};handleGestureMove=(b)=>{this.latestGestureDistance=this.getDistanceBetweenTouchPoints(b.touches)};handleGestureEnd=(b)=>{if(this.isMultiTouch=!1,this.dispatchGestureEvent("gesture"),this.latestGestureDistance<this.gestureStartDistance)this.dispatchGestureEvent("pinch");else this.dispatchGestureEvent("spread");this.latestGestureDistance=0};getDistanceBetweenTouchPoints=(b)=>{const w=b[0].clientX-b[1].clientX,H=b[0].clientY-b[1].clientY;return Math.hypot(w,H)};dispatchSwipeEvent=(b,w)=>{const H=this.eventPrefix+b,L=new CustomEvent(H,{detail:w});this.element.dispatchEvent(L)};dispatchGestureEvent=(b)=>{const w=this.eventPrefix+b,H=new CustomEvent(w);this.element.dispatchEvent(H)}}export{F as default};

//# debugId=32B0C6BF7A84FAD564756e2164756e21
