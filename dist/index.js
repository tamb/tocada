function z(M,b){if(M<b)return b-M;else return M-b}function $(M,b={}){return new A(M,b)}class A{element;startX=0;startY=0;startTime=0;startPressure=0;endPressure=0;startingElement=null;touchedElements=[];thresholds;eventPrefix="";gestureStartDistance=0;latestGestureDistance=0;isMultiTouch=!1;activeTouches=0;touchCount=0;constructor(M,b={}){if(this.element=typeof M==="string"?document.querySelector(M):M,!this.element){console.error("Element not found");return}const{thresholds:G={},eventPrefix:L=""}=b;this.thresholds={swipeThreshold:G.swipeThreshold||50},this.eventPrefix=L,this.element.addEventListener("touchstart",this.handleTouchStart,!1),this.element.addEventListener("touchmove",this.handleTouchMove,!1),this.element.addEventListener("touchend",this.handleTouchEnd,!1)}destroy=()=>{this.element?.removeEventListener("touchstart",this.handleTouchStart),this.element?.removeEventListener("touchmove",this.handleTouchMove),this.element?.removeEventListener("touchend",this.handleTouchEnd)};handleTouchStart=(M)=>{if(this.activeTouches+=M.changedTouches.length,this.touchCount=M.touches.length,this.activeTouches>1)this.isMultiTouch=!0,this.gestureStartDistance=this.getDistanceBetweenTouchPoints(M.touches),this.handleGestureStart(M);else this.isMultiTouch=!1,this.handleSwipeStart(M)};handleTouchMove=(M)=>{M.preventDefault();const b=M.touches[0].clientX,G=M.touches[0].clientY,L=document.elementFromPoint(b,G);if(L)this.touchedElements.push(L);if(this.isMultiTouch)this.handleGestureMove(M)};handleTouchEnd=(M)=>{if(this.activeTouches>=2)this.handleGestureEnd(M),this.touchCount=0;else if(this.activeTouches===1)this.handleSwipeEnd(M),this.touchCount=0;this.activeTouches-=M.changedTouches.length};handleSwipeStart=(M)=>{const b=M.touches[0];this.startX=b.clientX,this.startY=b.clientY,this.startTime=Date.now(),this.startPressure=b.force||0,this.startingElement=document.elementsFromPoint(this.startX,this.startY)[0],this.touchedElements.push(this.startingElement)};handleSwipeEnd=(M)=>{if(!this.isMultiTouch&&this.touchCount===1){const b=M.changedTouches[0],G=Date.now(),L=G-this.startTime,j=z(this.startX,b.clientX),k=z(this.startY,b.clientY),B=Math.abs(j),C=Math.abs(k),F=Math.hypot(B,C),I=j/L,J=k/L,K=F/L;this.endPressure=b.force||0;const Q=(this.startPressure+this.endPressure)/2,R=document.elementFromPoint(b.clientX,b.clientY),H={velocityX:I,velocityY:J,velocity:K,avgPressure:Q,startPressure:this.startPressure,endPressure:this.endPressure,startTime:this.startTime,endTime:G,distanceX:B,distanceY:C,distance:F,startingElement:this.startingElement,endingElement:R,touchedElements:this.touchedElements};this.dispatchSwipeEvent("swipe",H);const U=this.startX<b.clientX?"swiperight":"swipeleft",V=this.startY<b.clientY?"swipedown":"swipeup",W=j>k?U:V;this.dispatchSwipeEvent(W,H),this.touchedElements=[]}};handleGestureStart=(M)=>{this.isMultiTouch=!0};handleGestureMove=(M)=>{this.latestGestureDistance=this.getDistanceBetweenTouchPoints(M.touches)};handleGestureEnd=(M)=>{if(this.isMultiTouch=!1,this.dispatchGestureEvent("gesture"),this.latestGestureDistance<this.gestureStartDistance)this.dispatchGestureEvent("pinch");else this.dispatchGestureEvent("spread");this.latestGestureDistance=0};getDistanceBetweenTouchPoints=(M)=>{const b=M[0].clientX-M[1].clientX,G=M[0].clientY-M[1].clientY;return Math.hypot(b,G)};dispatchSwipeEvent=(M,b)=>{const G=this.eventPrefix+M,L=new CustomEvent(G,{detail:b});this.element.dispatchEvent(L)};dispatchGestureEvent=(M)=>{const b=this.eventPrefix+M,G=new CustomEvent(b);this.element.dispatchEvent(G)}}export{$ as useTouchEvents,A as default};

//# debugId=D640F23BF7D0177964756e2164756e21
